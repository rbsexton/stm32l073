###################################################################
# Makefile                                                         #
####################################################################

.SUFFIXES:				# ignore builtin rules
.PHONY: all debug release clean

####################################################################
# Definitions                                                      #
####################################################################

# uniq is a function which remove duplicate elements from a list
uniq = $(strip $(if $1,$(firstword $1) \
       $(call uniq,$(filter-out $(firstword $1),$1))))

DEVICE = STM32L073xx
PROJECTNAME = supervisor

OBJ_DIR = build
EXE_DIR = exe
LST_DIR = lst

SDK=STM32Cube_FW_F0_V1.8.0
CM3LIB=../cm3lib
SAPI=../sockpuppet/sapi

####################################################################
# Definitions of toolchain.                                        #
# You might need to do changes to match your system setup          #
####################################################################

# Change path to the tools according to your system configuration
# DO NOT add trailing whitespace chars, they do matter !
WINDOWSCS  ?= GNU Tools ARM Embedded\4.9 2015q1
LINUXCS    ?= /Applications/ARM

RMDIRS     := rm -rf
RMFILES    := rm -rf
ALLFILES   := /*.*
NULLDEVICE := /dev/null
SHELLNAMES := $(ComSpec)$(COMSPEC)

# Try autodetecting the environment
ifeq ($(SHELLNAMES),)
  # Assume we are making on a Linux platform
  TOOLDIR := $(LINUXCS)
else
  QUOTE :="
  ifneq ($(COMSPEC),)
    # Assume we are making on a mingw/msys/cygwin platform running on Windows
    # This is a convenient place to override TOOLDIR, DO NOT add trailing
    # whitespace chars, they do matter !
    TOOLDIR := $(PROGRAMFILES)/$(WINDOWSCS)
    ifeq ($(findstring cygdrive,$(shell set)),)
      # We were not on a cygwin platform
      NULLDEVICE := NUL
    endif
  else
    # Assume we are making on a Windows platform
    # This is a convenient place to override TOOLDIR, DO NOT add trailing
    # whitespace chars, they do matter !
    SHELL      := $(SHELLNAMES)
    TOOLDIR    := $(ProgramFiles)/$(WINDOWSCS)
    RMDIRS     := rd /s /q
    RMFILES    := del /s /q
    ALLFILES   := \*.*
    NULLDEVICE := NUL
  endif
endif

# Create directories and do a clean which is compatible with parallell make
$(shell mkdir $(OBJ_DIR)>$(NULLDEVICE) 2>&1)
$(shell mkdir $(EXE_DIR)>$(NULLDEVICE) 2>&1)
$(shell mkdir $(LST_DIR)>$(NULLDEVICE) 2>&1)
ifeq (clean,$(findstring clean, $(MAKECMDGOALS)))
  ifneq ($(filter $(MAKECMDGOALS),all debug release),)
    $(shell $(RMFILES) $(OBJ_DIR)$(ALLFILES)>$(NULLDEVICE) 2>&1)
    $(shell $(RMFILES) $(EXE_DIR)$(ALLFILES)>$(NULLDEVICE) 2>&1)
    $(shell $(RMFILES) $(LST_DIR)$(ALLFILES)>$(NULLDEVICE) 2>&1)
  endif
endif

CC      = $(QUOTE)$(TOOLDIR)/bin/arm-none-eabi-gcc$(QUOTE)
LD      = $(QUOTE)$(TOOLDIR)/bin/arm-none-eabi-ld$(QUOTE)
AR      = $(QUOTE)$(TOOLDIR)/bin/arm-none-eabi-ar$(QUOTE)
OBJCOPY = $(QUOTE)$(TOOLDIR)/bin/arm-none-eabi-objcopy$(QUOTE)
DUMP    = $(QUOTE)$(TOOLDIR)/bin/arm-none-eabi-objdump$(QUOTE)

####################################################################
# Flags                                                            #
####################################################################

# -MMD : Don't generate dependencies on system header files.
# -MP  : Add phony targets, useful when a h-file is removed from a project.
# -MF  : Specify a file to write the dependencies to.
DEPFLAGS = -MMD -MP -MF $(@:.o=.d)

#
# Add -Wa,-ahld=$(LST_DIR)/$(@F:.o=.lst) to CFLAGS to produce assembly list files
#
override CFLAGS += -D$(DEVICE) -std=c99 -Wall -Wextra -mcpu=cortex-m0 -mthumb \
 -ffunction-sections \
-fdata-sections -fomit-frame-pointer $(DEPFLAGS)

override ASMFLAGS += -x assembler-with-cpp -D$(DEVICE) -Wall -Wextra -mcpu=cortex-m0 -mthumb  


#
# NOTE: The -Wl,--gc-sections flag may interfere with debugging using gdb.
#

override LDFLAGS += -Xlinker -Map=$(LST_DIR)/$(PROJECTNAME).map -mcpu=cortex-m0 \
 -mthumb -TSTM32L073VZTx_FLASH.ld \
 -Wl,--gc-sections 

LIBS = -Wl,--start-group -lgcc -lc -lnosys   -Wl,--end-group


INCLUDEPATHS += \
-I. \
-IInc \
-I../STM32CubeL0/Drivers/STM32L0xx_HAL_Driver/Inc \
-I../STM32CubeL0/Drivers/CMSIS/Device/ST/STM32L0xx/Include \
-I../STM32CubeL0/Drivers/CMSIS/Core/Include \
-I../STM32CubeL0/Drivers/BSP/STM32L073Z_EVAL \
-I../STM32CubeL0/Middlewares/ST/STM32_USB_Device_Library/Core/Inc \
-I../STM32CubeL0/Middlewares/ST/STM32_USB_Device_Library/Class/CDC/Inc \
-I../STM32CubeL0/Drivers/BSP/STM32L073Z_EVAL \
-I../STM32CubeL0//Drivers/STM32L0xx_HAL_Driver/Inc 

#-IDrivers/BSP/STM32F072B-Discovery \
#-IDrivers/STM32F0xx_HAL_Driver/Inc \
#-IDrivers/CMSIS/Device/ST/STM32F0xx/Include \
#-IDrivers/CMSIS/Include/ \
#-IMiddlewares/ST/STM32_USB_Device_Library/Class/CDC/Inc
#-I$(CM3LIB) \
#-I$(SAPI) 
####################################################################
# Files                                                            #
####################################################################
s_SRC += startup_stm32l073xx.s

# s_SRC += $(SAPI)/svchandler-m0.s  svchandler-table.s 
# s_SRC += $(SAPI)/pendsv.s
# s_SRC += $(SAPI)/syscall-testshims.s 
# s_SRC += $(CM3LIB)/bl_launcher.s

C_SRC +=  \
Src/main.c \
stm32l0xx_hal_msp.c \
stm32l0xx_it.c \
system_stm32l0xx.c \
usbd_cdc_interface.c \
usbd_conf.c \
usbd_desc.c \
../STM32CubeL0/Drivers/BSP/STM32L073Z_EVAL/stm32l073z_eval.c \
../STM32CubeL0/Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal.c \
../STM32CubeL0/Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_rcc.c \
../STM32CubeL0/Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_rcc_ex.c \
../STM32CubeL0/Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_pcd.c \
../STM32CubeL0/Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_dma.c \
../STM32CubeL0/Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_uart.c \
../STM32CubeL0/Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_uart_ex.c \
../STM32CubeL0/Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_gpio.c \
../STM32CubeL0/Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_cortex.c \
../STM32CubeL0/Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_tim.c \
../STM32CubeL0/Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_pcd_ex.c \
../STM32CubeL0/Drivers/STM32L0xx_HAL_Driver/Src/stm32l0xx_ll_usb.c \
../STM32CubeL0//Middlewares/ST/STM32_USB_Device_Library/Core/Src/usbd_core.c \
../STM32CubeL0//Middlewares/ST/STM32_USB_Device_Library/Core/Src/usbd_ctlreq.c \
../STM32CubeL0/Middlewares/ST/STM32_USB_Device_Library/Core/Src/usbd_ioreq.c \
../STM32CubeL0//Middlewares/ST/STM32_USB_Device_Library/Class/CDC/Src/usbd_cdc.c  

# $(SAPI)/pendsv-launcher.c \
./systemcalls.c 



# S_SRC +=  

####################################################################
# Rules                                                            #
####################################################################

C_FILES = $(notdir $(C_SRC) )
S_FILES = $(notdir $(S_SRC) $(s_SRC) )
#make list of source paths, uniq removes duplicate paths
C_PATHS = $(call uniq, $(dir $(C_SRC) ) )
S_PATHS = $(call uniq, $(dir $(S_SRC) $(s_SRC) ) )

C_OBJS = $(addprefix $(OBJ_DIR)/, $(C_FILES:.c=.o))
S_OBJS = $(if $(S_SRC), $(addprefix $(OBJ_DIR)/, $(S_FILES:.S=.o)))
s_OBJS = $(if $(s_SRC), $(addprefix $(OBJ_DIR)/, $(S_FILES:.s=.o)))
C_DEPS = $(addprefix $(OBJ_DIR)/, $(C_FILES:.c=.d))
OBJS = $(C_OBJS) $(S_OBJS) $(s_OBJS)

vpath %.c $(C_PATHS)
vpath %.s $(S_PATHS)
vpath %.S $(S_PATHS)

# Default build is debug build
all:      debug

debug:    CFLAGS += -DDEBUG -O2 -g
debug:    $(EXE_DIR)/$(PROJECTNAME).bin

release:  CFLAGS += -DNDEBUG -O0 -g 
release:  $(EXE_DIR)/$(PROJECTNAME).bin

# Create objects from C SRC files
$(OBJ_DIR)/%.o: %.c
	@echo "Building file: $<"
	$(CC) $(CFLAGS) $(INCLUDEPATHS) -c -o $@ $<

# Assemble .s/.S files
$(OBJ_DIR)/%.o: %.s
	@echo "Assembling $<"
	$(CC) $(ASMFLAGS) $(INCLUDEPATHS) -c -o $@ $<

$(OBJ_DIR)/%.o: %.S
	@echo "Assembling $<"
	$(CC) $(ASMFLAGS) $(INCLUDEPATHS) -c -o $@ $<

# Link
$(EXE_DIR)/$(PROJECTNAME).out: $(OBJS)
	@echo "Linking target: $@"
	$(CC) $(LDFLAGS) $(OBJS) $(LIBS) -o $(EXE_DIR)/$(PROJECTNAME).out

# Create binary file
$(EXE_DIR)/$(PROJECTNAME).bin: $(EXE_DIR)/$(PROJECTNAME).out
	@echo "Creating binary file"
	$(OBJCOPY) -O ihex $(EXE_DIR)/$(PROJECTNAME).out $(EXE_DIR)/$(PROJECTNAME).hex
	$(OBJCOPY) -O binary $(EXE_DIR)/$(PROJECTNAME).out $(EXE_DIR)/$(PROJECTNAME).bin
# Uncomment next line to produce assembly listing of entire program
	$(DUMP) -h -S -C $(EXE_DIR)/$(PROJECTNAME).out>$(LST_DIR)/$(PROJECTNAME)out.lst

clean:
ifeq ($(filter $(MAKECMDGOALS),all debug release),)
	$(RMDIRS) $(OBJ_DIR) $(LST_DIR) $(EXE_DIR)
endif

# include auto-generated dependency files (explicit rules)
ifneq (clean,$(findstring clean, $(MAKECMDGOALS)))
-include $(C_DEPS)
endif
